    cpu	8048
	org 400h
	include "g7000.h"

	; BIOS routines in g7000.h
	jmp     selectgame				    ; reset
	jmp     irq						    ; interrupt
	jmp     timer					    ; timer
	jmp     vsyncirq				    ; VSYNC-interrupt
	jmp     main					    ; start main program
	jmp     soundirq				    ; sound-interrupt

; Internal RAM variables
; Space available: 0x20h to 0x3ch (29 bytes)
valid_move  equ 020h
animation_flag  equ 023h


; Timer not used
timer:
    ret


; Handles program flow
main:
    call    gfxoff                      ; turn off graphics while editing vdc
    call    init_grid                   ; create maze
    call    init_sprites                ; create sprites
    call    game_loop                   ; main game loop


; Initializes sprite VDCs and copies onto screen
init_sprites:
    
    ; Sprite 0 Control $00-$03
    ; Sprite 1 Control $04-$07
    ; Sprite 2 Control $08-$0B
    ; Sprite 3 Control $0C-$0F

    ; KC Sprite
    mov     r0,#vdc_spr0_shape         
    mov     r1,#kc_neutral & 0ffh    
    mov     r7,#8
    call    copy_sprite
    mov     r0,#000h                    ; y position set
    movx    a,@r0
    mov     a,#175
    movx    @r0,a
    mov     r0,#001h                    ; x position set
    movx    a,@r0 
    mov     a,#143
    movx    @r0,a
    mov     r0,#002h                    ; color
    movx    a,@r0
    mov     a,#col_spr_cyan
    movx    @r0,a 

    ; Ghost Sprite 1
    mov     r0,#vdc_spr1_shape         
    mov     r1,#ghost_left_1 & 0ffh    
    mov     r7,#8
    call    copy_sprite
    mov     r0,#004h                    ; y position set
    movx    a,@r0
    mov     a,#125
    movx    @r0,a
    mov     r0,#005h                    ; x position set
    movx    a,@r0 
    mov     a,#77
    movx    @r0,a
    mov     r0,#006h                    ; color
    movx    a,@r0
    mov     a,#col_spr_red
    movx    @r0,a 

    ; Ghost Sprite 2
    mov     r0,#vdc_spr2_shape         
    mov     r1,#ghost_right_2 & 0ffh    
    mov     r7,#8
    call    copy_sprite
    mov     r0,#008h                    ; y position set
    movx    a,@r0
    mov     a,#125
    movx    @r0,a
    mov     r0,#009h                    ; x position set
    movx    a,@r0 
    mov     a,#77
    movx    @r0,a
    mov     r0,#00Ah                    ; color
    movx    a,@r0
    mov     a,#col_spr_blue
    movx    @r0,a 

    ; Miru Sprite
    mov     r0,#vdc_spr3_shape         
    mov     r1,#miru_left_1 & 0ffh    
    mov     r7,#8
    call    copy_sprite
    mov     r0,#00Ch                    ; y position set
    movx    a,@r0
    mov     a,#125
    movx    @r0,a
    mov     r0,#00Dh                    ; x position set
    movx    a,@r0 
    mov     a,#62
    movx    @r0,a
    mov     r0,#00Eh                    ; color
    movx    a,@r0
    mov     a,#col_spr_green
    movx    @r0,a 

    ret



; Loop that runs for every game frame
game_loop:
    
    call    frame_advance

    ; Read joystick and move  
    call    move_player

    jmp     game_loop

frame_advance:
    ; Advance one frame
    call    gfxon
    call    waitvsync            
    call    gfxoff

    ret

; Calls movement routines for player
move_player:

    ; Get joystick 0 movement
    mov     r1,#000h                    ; select joystick 0, r1 will be passed to call
    call    getjoystick                 ; stores joystick bits in r1
    mov     a,r1                        
    cpl     a 
    mov     r1,a                        ; save joystick bits

    ; joystick bits AND with BIOS value to determine which bit set
    mov     a,r1
    anl     a,#001h
    jnz     move_up

    mov     a,r1
    anl     a,#002h
    jnz     move_right

    mov     a,r1
    anl     a,#004h
    jnz     move_down

    mov     a,r1
    anl     a,#008h
    jnz     move_left

    call    neutral_animate

    ret


; Move player sprite up
move_up:

    ; Move sprite
    mov     r1,#000h
    movx    a,@r1
    cpl     a
    add     a,#019h
    cpl     a
    movx    @r1,a

    ret


; Move player sprite right
move_right:

    ; Move sprite
    mov     r1,#001h
    movx    a,@r1
    add     a,#00Fh
    movx    @r1,a

    ret

; Move player sprite down
move_down:

    ; Move sprite
    mov     r1,#000h
    movx    a,@r1
    add     a,#019h
    movx    @r1,a

    ret

; Move player sprite left
move_left:

    ; Move sprite
    mov     r1,#001h
    movx    a,@r1
    cpl     a
    add     a,#001h
    cpl     a
    movx    @r1,a

    ret


left_animation:
    mov     r0,#vdc_spr0_shape         
    mov     r1,#kc_left & 0ffh    
    mov     r7,#8
    call    copy_sprite


    call    frame_advance


    mov     r5, #04h
testingx:
    mov     r6, #15h
    call    closed_animate
    call    frame_advance
testingy:
    djnz    r6, testingy
    djnz    r5, testingx
    jmp     move_left



neutral_animate:
    mov     r0,#vdc_spr0_shape         
    mov     r1,#kc_neutral & 0ffh    
    mov     r7,#8
    call    copy_sprite

    ret

alternate_animation:
    mov     r1,#animation_flag
    mov     a,r1
    cpl     a
    mov     @r1,a    
    
    ret

closed_animate:
    
    mov     r0,#vdc_spr0_shape         
    mov     r1,#kc_closed & 0ffh    
    mov     r7,#8
    call    copy_sprite
    call    alternate_animation
    
    ret


; Initialize grid at start of game
; Note: bit 7 = bottom of grid
init_grid:

    ; Set color of maze 
    mov     r0,#vdc_color
    mov     a,#col_grd_yellow
    movx    @r0,a

    ; Set horizontal lines
    mov     r0,#vdc_gridh0
    mov     a,#10111001b
    movx    @r0,a
    mov     r0,#vdc_gridh1
    mov     a,#10000111b
    movx    @r0,a
    mov     r0,#vdc_gridh2
    mov     a,#10110001b
    movx    @r0,a
    mov     r0,#vdc_gridh3
    mov     a,#11001101b
    movx    @r0,a
    mov     r0,#vdc_gridh4
    mov     a,#11010001b
    movx    @r0,a
    mov     r0,#vdc_gridh5
    mov     a,#11001011b
    movx    @r0,a
    mov     r0,#vdc_gridh6
    mov     a,#10110101b
    movx    @r0,a
    mov     r0,#vdc_gridh7
    mov     a,#11001011b
    movx    @r0,a
    mov     r0,#vdc_gridh8
    mov     a,#10110101b
    movx    @r0,a

    ; Set vertical lines
    mov     r0,#vdc_gridv0
    mov     a,#01101111b
    movx    @r0,a
    mov     r0,#vdc_gridv1
    mov     a,#00100000b
    movx    @r0,a
    mov     r0,#vdc_gridv2
    mov     a,#01000101b
    movx    @r0,a
    mov     r0,#vdc_gridv3
    mov     a,#00101010b
    movx    @r0,a
    mov     r0,#vdc_gridv4
    mov     a,#00010001b
    movx    @r0,a
    mov     r0,#vdc_gridv5
    mov     a,#00010010b
    movx    @r0,a
    mov     r0,#vdc_gridv6
    mov     a,#00100101b
    movx    @r0,a
    mov     r0,#vdc_gridv7
    mov     a,#01001000b
    movx    @r0,a
    mov     r0,#vdc_gridv8
    mov     a,#00000000b
    movx    @r0,a
    mov     r0,#vdc_gridv9
    mov     a,#01101111b
    movx    @r0,a

    ret

; Copies sprite data into VDC
copy_sprite:
    mov     a,r1 
    movp    a,@a
    movx    @r0,a 
    inc     r0
    inc     r1 
    djnz    r7,copy_sprite

    ret

; All sprites designed with assumption that will be flipped on Y-axis
ghost_right_1:
	db	10111101b
	db	01111110b
	db	10110111b
	db	10110111b
	db	11111111b
	db	01111110b
    db	11011011b
	db	10010001b

ghost_right_2:
	db	10111101b
	db	01111110b
	db	10110111b
	db	10110111b
	db	11111111b
	db	01111110b
    db	11011011b
	db	01001010b

ghost_left_1:
	db	10111101b
	db	01111110b
	db	11101101b
	db	11101101b
	db	11111111b
	db	01111110b
    db	11011011b
	db	10010001b

ghost_left_2:
	db	10111101b
	db	01111110b
	db	11101101b
	db	11101101b
	db	11111111b
	db	01111110b
    db	11011011b
	db	01001010b

miru_left_1:
	db	01011100b
    db  10111110b
    db  01110101b
    db  01110101b
    db  01111111b
    db  01111111b
    db  00111110b
    db  01111100b


kc_neutral:
 	db	10000001b
    db  01011010b
    db  00111100b
    db  01011010b 
    db  11111111b
    db  10111101b 
    db  01000010b
    db  00111100b

kc_right:
    db	01111101b
    db  00110110b
    db  00011110b
    db  00000111b 
    db  00001110b
    db  00111100b 
    db  01111000b
    db  00000000b

kc_left:
    db	10111110b
    db  01101100b
    db  01111000b
    db  11100000b 
    db  01110000b
    db  00111100b 
    db  00011110b
    db  00000000b

kc_closed:
    db	00011000b
    db  00111100b
    db  01111110b
    db  11111111b 
    db  01111110b
    db  00111100b 
    db  00011000b
    db  00000000b

kc_down:
    db  00000000b
    db	10010000b
    db  01111100b
    db  11111110b
    db  10110111b 
    db  11100111b
    db  11000011b 
    db  10000001b

kc_up:
    db  10000001b
    db  11000011b
    db  11100111b 
    db  10110111b
    db  11111110b 
    db  01111100b
    db  10010000b
    db	00000000b